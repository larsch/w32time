cmake_minimum_required(VERSION 3.3)

project(w32time)
add_definitions(-DUNICODE -D_UNICODE)
add_executable(w32time w32time.c)
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  add_compile_options(-Wall)
  set(CMAKE_EXE_LINKER_FLAGS "-nostartfiles -Wl,-eMain")
  target_link_libraries(w32time shlwapi)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  add_compile_options(/W4 /WX /GS- /Oi)
  string(REGEX REPLACE "/RTC(su|[1su])" "" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
  set(CMAKE_EXE_LINKER_FLAGS "/nodefaultlib /entry:Main")
  target_link_libraries(w32time shlwapi libcmt)
endif()

install(TARGETS w32time DESTINATION ".")
install(FILES LICENSE.md DESTINATION "." RENAME LICENSE.txt)
install(FILES README.md DESTINATION "." RENAME README.txt)

execute_process(COMMAND git describe
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
  OUTPUT_VARIABLE VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
string(REPLACE "v" "" VERSION ${VERSION})
string(REPLACE "." ";" VERSION ${VERSION})
list(GET VERSION 0 CPACK_PACKAGE_VERSION_MAJOR)
list(GET VERSION 1 CPACK_PACKAGE_VERSION_MINOR)
list(GET VERSION 2 CPACK_PACKAGE_VERSION_PATCH)
set(CPACK_GENERATOR "ZIP")
include(CPack)
